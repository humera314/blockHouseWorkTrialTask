
# 📈 Market Data Service – Blockhouse Capital Trial Assignment

This is a production-ready microservice that fetches market data (e.g., from Alpha Vantage), processes it through a Kafka streaming pipeline, stores results in PostgreSQL, and exposes endpoints via FastAPI.

---

## 🧩 Features

- 🔌 Fetches latest price data from Alpha Vantage API
- 📤 Publishes raw prices to Kafka topic `price-events`
- 🧠 Kafka consumer computes 5-point moving average and stores it
- 📊 Exposes RESTful APIs using FastAPI
- 🗃 Stores raw and processed data in PostgreSQL
- 🐳 Fully containerized using Docker & Docker Compose

---

## 🚀 Getting Started

### 🔧 Prerequisites

- Python 3.10+
- Docker & Docker Compose
- Alpha Vantage API Key

### 🛠️ Setup

1. **Clone and navigate to project:**

   ```bash
   git clone <your-repo-url>
   cd fixed-market-data-service
   ```

2. **Set environment variables (.env)**

   ```env
   DATABASE_URL=postgresql://user:password@localhost:5432/market_data
   ALPHA_VANTAGE_API_KEY=your_key_here
   PYTHONPATH=.
   ```

3. **Start services via Docker Compose**

   ```bash
   docker-compose up --build
   ```

4. **Run table setup**

   ```bash
   python -m app.models.create_tables
   ```

---

## 📬 API Endpoints

### `GET /prices/latest`

Fetches the latest market price for a symbol.

**Query Parameters:**

- `symbol`: str (e.g., "AAPL")
- `provider`: optional (default: "alpha_vantage")

**Response:**

```json
{
  "symbol": "AAPL",
  "price": 150.25,
  "timestamp": "2024-03-20T10:30:00Z",
  "provider": "alpha_vantage"
}
```

---

### `POST /prices/poll`

Polls prices for a list of symbols at a defined interval.

**Request:**

```json
{
  "symbols": ["AAPL", "MSFT"],
  "interval": 60,
  "provider": "alpha_vantage"
}
```

**Response:**

```json
{
  "job_id": "poll_123",
  "status": "accepted",
  "config": {
    "symbols": ["AAPL", "MSFT"],
    "interval": 60
  }
}
```

---

## 🛠 Architecture

```mermaid
graph TB
    subgraph "Market Data Service"
        API["FastAPI Service"]
        DB[(PostgreSQL)]
    end

    subgraph "Message Queue"
        Kafka["Kafka"]
        ZK["ZooKeeper"]
        Producer["Price Producer"]
        Consumer["MA Consumer"]
    end

    subgraph "External"
        Alpha["Alpha Vantage API"]
    end

    Client --> API
    API --> DB
    API --> Alpha
    API --> Producer
    Producer --> Kafka
    Kafka --> Consumer
    Consumer --> DB
    ZK <--> Kafka
```

---

## ✅ Testing

```bash
python test_db.py
python -m scripts.consumer
python send_event.py
```

---

## 📦 Directory Structure

```
fixed-market-data-service/
├── app/
│   ├── api/
│   ├── core/
│   ├── models/
│   ├── schemas/
│   ├── services/
├── scripts/
├── requirements/
├── docker-compose.yml
├── .env
├── README.md
```

---

## 🧪 Optional Enhancements

- [ ] Redis cache
- [ ] Prometheus + Grafana monitoring
- [ ] GitHub Actions: lint + test
- [ ] Deploy to AWS/Heroku

---

## 👨‍💻 Author

Submitted by: **Humera Naaz**  
Assignment for: **Blockhouse Capital – Software Engineer Intern**
